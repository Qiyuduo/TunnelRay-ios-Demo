// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TunnelRay
import Alamofire
import CocoaLumberjack
import CocoaLumberjackSwift
import Combine
import CryptoSwift
import CryptorRSA
import Foundation
import NetworkExtension
import Swift
import SwiftyJSON
@_exported import TunnelRay
import _Concurrency
@available(iOS 13.0, *)
public class TunnelRay_ios_lib : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($status) public var status: Swift.String {
    get
    @available(iOS 13.0, *)
    set
    @available(iOS 13.0, *)
    _modify
  }
  public var $status: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($action) public var action: Swift.String {
    get
    @available(iOS 13.0, *)
    set
    @available(iOS 13.0, *)
    _modify
  }
  public var $action: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($changable) public var changable: Swift.Bool {
    get
    @available(iOS 13.0, *)
    set
    @available(iOS 13.0, *)
    _modify
  }
  public var $changable: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($error) public var error: Swift.String {
    get
    @available(iOS 13.0, *)
    set
    @available(iOS 13.0, *)
    _modify
  }
  public var $error: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($connected) public var connected: Swift.Bool {
    get
    @available(iOS 13.0, *)
    set
    @available(iOS 13.0, *)
    _modify
  }
  public var $connected: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var redirectUrl: Swift.String
  public init()
  public func connect()
  public func disconnect()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TunnelRayTunnel : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var host: Swift.String?
  @objc public var port: Swift.String?
  @objc public var method: Swift.String?
  @objc public var password: Swift.String?
  @objc public var path: Swift.String?
  @objc public var protocal: Swift.String?
  @objc public var config: [Swift.String : Swift.String] {
    @objc get
  }
  @objc public var configObject: [Swift.String : ObjectiveC.NSObject] {
    @objc get
  }
  @objc public enum TunnelStatus : Swift.Int {
    case connected = 0
    case disconnected = 1
    case reconnecting = 2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc convenience public init(id: Swift.String, config: [Swift.String : Any])
  @objc convenience public init(id: Swift.String, configObject: [Swift.String : ObjectiveC.NSObject])
  @objc public func encode() -> Foundation.Data?
  @objc public static func decode(_ jsonData: Foundation.Data) -> TunnelRay.TunnelRayTunnel?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.3, *)
public class TunnelRayConfig : ObjectiveC.NSObject {
  public func getHost(defaultDate: Foundation.Date?) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.3, *)
public class TunnelRayCrypto : ObjectiveC.NSObject {
  public func decrypt(_ cipher: Swift.String) -> Swift.String
  public func encrypt(_ data: Swift.String) -> Swift.String
  public func verifyAndDecrypt(data: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension TunnelRay.TunnelRayTunnel.TunnelStatus : Swift.Equatable {}
extension TunnelRay.TunnelRayTunnel.TunnelStatus : Swift.Hashable {}
extension TunnelRay.TunnelRayTunnel.TunnelStatus : Swift.RawRepresentable {}
